// Generated by CoffeeScript 1.7.1
(function() {
  jQuery(function($) {
    var Popup, initFormBehaviour, message;
    message = new ((function() {
      function _Class(timeout) {
        var top;
        this.timeout = timeout != null ? timeout : 6000;
        this.$holder = $("<div class='messages'></div>").appendTo('body').on('close', '.message', function() {
          clearTimeout($(this).data('timeout'));
          return $(this).fadeUp(function() {
            return $(this).remove();
          });
        }).on('click', '.close-message', function() {
          return $(this).parents('.message').trigger('close');
        });
        top = parseInt(this.$holder.css('top'));
        $(window).on('scroll', (function(_this) {
          return function() {
            return _this.$holder.css('top', Math.max(top - $(window).scrollTop(), 10));
          };
        })(this));
      }

      _Class.prototype.notify = function(header, text) {
        return this.message("", header, text);
      };

      _Class.prototype.success = function(header, text) {
        return this.message("success", header, text);
      };

      _Class.prototype.error = function(header, text) {
        return this.message("error", header, text);
      };

      _Class.prototype.info = function(header, text) {
        return this.message("", header, text);
      };

      _Class.prototype.message = function(type, header, text) {
        var $message;
        if (type) {
          type = "message-" + type;
        }
        if (!text) {
          text = "";
        }
        $message = $("<div class='message " + type + "'><span class='close close-message'></span><header>" + header + "</header>" + text + "</div>");
        $message.appendTo(this.$holder);
        $message.hide().fadeDown();
        return $message.data('timeout', setTimeout(function() {
          return $message.trigger('close');
        }, this.timeout));
      };

      return _Class;

    })())();
    Popup = (function() {
      function _Class(content, autoshow) {
        var popup;
        if (content == null) {
          content = "";
        }
        if (autoshow == null) {
          autoshow = true;
        }
        this.blackout = $("<div class='blackout'></div>").appendTo($('body'));
        this.popup = $("<div class='popup'><div><div></div></div></div>").appendTo($('body'));
        this.popup.children().children().html(content);
        if (autoshow) {
          this.show();
        }
        if (!autoshow) {
          this.hide();
        }
        popup = this;
        this.popup.children().children().mousedown(function(e) {
          if (e.target === this && e.button === 0) {
            return popup.remove();
          }
        });
        this.popup.find(".close-popup").click(function() {
          popup.remove();
          return false;
        });
      }

      _Class.prototype.show = function() {
        if (this.showed) {
          return;
        }
        this.blackout.hide();
        setTimeout((function(_this) {
          return function() {
            return _this.blackout.fadeIn();
          };
        })(this), 100);
        this.popup.hide().fadeIn();
        return this.showed = true;
      };

      _Class.prototype.hide = function(callback) {
        if (!this.showed) {
          return;
        }
        this.popup.fadeOut();
        this.blackout.fadeOut(callback);
        return this.showed = false;
      };

      _Class.prototype.remove = function() {
        return this.hide((function(_this) {
          return function() {
            _this.blackout.remove();
            return _this.popup.remove();
          };
        })(this));
      };

      return _Class;

    })();
    (function() {
      if ($.fn.datepicker) {
        $.fn.datepicker.defaults = $.extend($.fn.datepicker.defaults, {
          format: "dd.mm.yyyy",
          language: "ru",
          weekStart: 1,
          autoclose: true,
          todayHighlight: true
        });
      }
      if ($.fn.timepicker) {
        $.fn.timepicker.defaults = $.extend($.fn.timepicker.defaults, {
          showInputs: false,
          showMeridian: false
        });
      }
      if ($.fn.redactor) {
        return $.Redactor.opts = $.extend($.Redactor.opts, {
          toolbarFixedBox: true,
          buttons: ["html", "|", "formatting", "|", "bold", "italic", "deleted", "|", "unorderedlist", "orderedlist", "outdent", "indent", "|", "image", "video", "file", "table", "link", "|", "alignment", "|", "horizontalrule"],
          imageUpload: "/backend/fv/persist"
        });
      }
    })();
    initFormBehaviour = function() {
      var keyup;
      $(this).find("input.date").each(function() {
        if ($.fn.datepicker) {
          return $(this).datepicker();
        }
      });
      $(this).find("input.time").each(function() {
        if ($.fn.timepicker) {
          return $(this).timepicker();
        }
      });
      $(this).find("textarea.rich").each(function() {
        if ($.fn.redactor) {
          return $(this).redactor();
        }
      });
      $(this).find(".tags").each(function() {
        var options, url;
        if (!$.fn.selectize) {
          return;
        }
        url = $(this).data('url');
        options = {
          create: false,
          allowEmptyOption: true
        };
        if ($(this).attr('multiple')) {
          options.plugins = ['remove_button'];
        }
        if ($(this).data('lazy')) {
          options.preload = true;
          options.load = function(query, callback) {
            return $.ajax({
              type: 'GET',
              url: url,
              data: {
                q: query
              },
              dataType: 'json',
              error: function() {
                return callback();
              },
              success: function(res) {
                return callback(res);
              }
            });
          };
        }
        return $(this).selectize(options);
      });
      $(this).find("textarea:not(.rich)").each(function() {
        if ($.fn.autosize) {
          return $(this).autosize();
        }
      });
      $(this).find("nav a").click(function() {
        var rel;
        $(this).addClass('active').siblings('.active').removeClass('active');
        rel = $(this).data('rel');
        $(this).parent().siblings('.group').hide().filter("*[data-rel=" + rel + "]").show();
        return false;
      });
      $(this).find(".file-remove").click(function() {
        message.notify("Файл будет удалён после сохранения");
        $(this).hide().siblings(".file-preview, .image-crop").hide().parents('label').find("input[type=hidden]").val('');
        return false;
      });
      $(this).find(".image-crop").click(function() {
        var $img, $label, btns, popup, src, url;
        $label = $(this).parents('label');
        src = $(this).data('src');
        url = $(this).data('url');
        btns = "<a class='btn close-popup' href='#'>Отмена</a> <a class='btn close-popup btn-orange ok' href='#'>Обрезать</a>";
        popup = new Popup("<div class='popup-page image'><div><img/></div>" + btns + "</div>");
        $img = popup.popup.find("img");
        $img.load(function() {
          var origAspect;
          origAspect = $img[0].width / $img[0].height;
          popup.popup.find("div>div").css({
            maxWidth: 80 * origAspect + "vh"
          });
          return $img.cropper({
            autoCropArea: .9,
            zoomable: false
          });
        });
        $img.attr({
          src: $(this).attr('href')
        });
        popup.popup.find(".ok").click(function() {
          popup.popup.fadeOut();
          return $.ajax({
            url: url,
            dataType: 'json',
            data: {
              src: src,
              params: $img.cropper('getData', true)
            },
            success: function(ans) {
              var fileName, path;
              if (ans.success) {
                path = ans.file.split("/");
                fileName = path[path.length - 1];
                $label.find("input[type=hidden]").val(fileName);
                $label.find(".file-preview").attr('href', ans.file).show();
                $label.find(".file-remove, .image-crop").show();
                return message.info("Временный файл создан в карантинной зоне");
              }
              return message.error("Произошла ошибка", ans.error || null);
            },
            error: function() {
              return popup.remove();
            }
          });
        });
        return false;
      });
      $(this).find(".image-preview").click(function() {
        var $img, popup, url;
        url = $(this).data('url');
        popup = new Popup("<div class='popup-page image'><div><img/></div><a class='btn close-popup' href='#'>Закрыть</a></div>");
        $img = popup.popup.find("img");
        $img.load(function() {
          var origAspect;
          origAspect = $img[0].width / $img[0].height;
          return popup.popup.find("div>div").css({
            maxWidth: 80 * origAspect + "vh"
          });
        });
        $img.attr({
          src: $(this).attr('href')
        });
        return false;
      });
      $(this).find("input[type=file]").change(function(e) {
        var $label, $loader, data;
        $label = $(this).parents('label').addClass('loading');
        $loader = $label.find('.progress>span');
        $loader.parent().addClass('unrecognized');
        data = new FormData;
        data.append($(this).attr('name'), this.files[0]);
        return $.ajax({
          url: '/backend/fv/upload',
          type: 'POST',
          data: data,
          cache: false,
          processData: false,
          contentType: false,
          context: this,
          dataType: 'json',
          xhr: function() {
            var xhr;
            xhr = new window.XMLHttpRequest;
            xhr.upload.addEventListener("progress", function(evt) {
              if (evt.lengthComputable) {
                $loader.css({
                  width: ((evt.loaded / evt.total) * 100) + "%"
                });
                return $loader.parent().removeClass('unrecognized');
              }
            });
            return xhr;
          },
          success: function(data) {
            var fileName, path;
            $label.removeClass('loading');
            if (data.success) {
              path = data.file.split("/");
              fileName = path[path.length - 1];
              $label.find("input[type=hidden]").val(fileName);
              $label.find(".file-preview").attr('href', data.file).show();
              $label.find(".file-remove, .image-crop").show();
              return message.info("Временный файл загружен в карантинную зону");
            } else {
              return message.error("Ошибка при загрузке временного файла.");
            }
          },
          error: function() {
            $label.removeClass('loading');
            return message.error("Ошибка при загрузке временного файла");
          }
        });
      });
      $(this).find("input, textarea").eq(0).focus();
      keyup = (function(_this) {
        return function(e) {
          if (e.keyCode !== 27) {
            return;
          }
          $("body").off('keyup', keyup);
          return $(_this).find('.cancel').trigger('click');
        };
      })(this);
      $("body").on('keyup', keyup);
      return $(this).find("input, textarea").eq(0).focus();
    };
    $(".header>.container>ul>li>a").click(function() {
      if ($(this).attr('href')) {
        return;
      }
      $(this).siblings('.drop-down').each(function() {
        var hide, show;
        show = (function(_this) {
          return function() {
            return $(_this).css({
              opacity: 0
            }).show().animate({
              opacity: 1
            }, 100).children('li:first-child').css({
              marginTop: -200
            }).animate({
              marginTop: 0
            }, 100);
          };
        })(this);
        hide = (function(_this) {
          return function() {
            return $(_this).stop().animate({
              opacity: 0
            }, 100, function() {
              return $(this).hide();
            }).children('li:first-child').animate({
              marginTop: -200
            }, 100);
          };
        })(this);
        if ($(this).is(':visible')) {
          return hide();
        } else {
          show();
          return setTimeout(function() {
            var callback;
            callback = function() {
              hide();
              return $(window).off('click', callback);
            };
            return $(window).on('click', callback);
          }, 100);
        }
      });
      $(window).trigger('click');
      return false;
    });
    $(".entity-list").each(function() {
      var $list, getSort, jqXHR, reload, search;
      $list = $(this);
      getSort = function() {
        return {};
      };
      search = $(this).parents(".container").find(".input-search").val();
      jqXHR = null;
      reload = (function(_this) {
        return function() {
          var data;
          data = {
            sort: getSort(),
            search: search
          };
          if (jqXHR) {
            jqXHR.abort();
          }
          if (history.replaceState) {
            history.replaceState(data, document.title, location.pathname + "?" + $.param(data));
          }
          return jqXHR = $.ajax({
            url: location.pathname,
            data: data,
            context: $list.find('.data').stop(),
            success: function(html) {
              $(this).stop().html(html).animate({
                opacity: 1
              });
              return jqXHR = null;
            },
            error: function(xhr, err) {
              if (err === "abort") {
                return;
              }
              alert("Не удалось загрузить данные");
              $(this).stop().animate({
                opacity: 1
              });
              return jqXHR = null;
            }
          });
        };
      })(this);
      $(this).parents(".container").find(".input-search").bind({
        keydown: function(e) {
          if (e.keyCode === 27) {
            $(this).val(search = '');
            return reload();
          } else {
            return setTimeout((function(_this) {
              return function() {
                search = $(_this).val();
                return reload();
              };
            })(this), 10);
          }
        }
      });
      $(this).parents(".container").find(".search-button").click(function() {
        search = $(this).siblings('input').val();
        return reload();
      });
      $(this).on('click', '.pager .btn', function() {
        $.ajax({
          url: this.getAttribute('href'),
          context: this,
          success: function(ans) {
            $(ans).children().filter(":not(.new)").insertBefore($(this).parents('.pager')).hide().slideDown();
            return $(this).parents('.pager').remove();
          }
        });
        return false;
      });
      return $(this).find(".sort").each(function() {
        getSort = function() {
          var sort;
          sort = {};
          $list.find('.sort select').each(function() {
            if ($(this).val()) {
              return sort[$(this).val()] = ($(this).next('.fa-sort-amount-asc').length > 0 ? 1 : -1);
            }
          });
          return sort;
        };
        $(this).on('click', '.fa-sort-amount-asc', function() {
          $(this).removeClass('fa-sort-amount-asc').addClass('fa-sort-amount-desc');
          return reload();
        });
        $(this).on('click', '.fa-sort-amount-desc', function() {
          $(this).removeClass('fa-sort-amount-desc').addClass('fa-sort-amount-asc');
          return reload();
        });
        return $(this).on('change', 'select', function() {
          var val;
          val = $(this).val();
          reload();
          return $(this).parents('nobr').each(function() {
            if ($(this).prevAll('nobr').length > 1) {
              return;
            }
            $(this).nextAll('nobr').remove();
            if ($(this).find('option').length > 1 && val) {
              return $(this).clone().insertAfter(this).each(function() {
                $(this).find("option[value='" + val + "']").remove();
                return $(this).find(".icon-sort-by-alphabet-alt").removeClass('icon-sort-by-alphabet-alt').addClass('icon-sort-by-alphabet');
              });
            }
          });
        });
      });
    });
    (function() {
      var $base, rebaseTo;
      $base = $('.entity-list.base');
      if (!$base.length) {
        return;
      }
      rebaseTo = function($list) {
        var offset;
        offset = $list.parents('.entity-list').length;
        return $base.animate({
          left: -offset * 500
        });
      };
      $base.on('refresh', '.entities>div', function() {
        var showed;
        showed = $(this).is(":visible");
        return $(this).load($(this).closest('.entity-list').attr('one').replace('$id', this.id), function() {
          var $item;
          $item = $(this).children().unwrap();
          if (!showed) {
            return $item.hide().slideDown();
          }
        });
      });
      $base.on('click', '.entities>div', function() {
        var $list, path, top;
        if ($(this).hasClass('edit')) {
          return;
        }
        $list = $(this).closest('.entity-list');
        top = $(this).offset().top - $list.offset().top;
        rebaseTo($list);
        $list.parent().find('.entities>.edit').removeClass('edit');
        $list.parent().find('.entity-edit').html('');
        $(this).addClass('edit');
        if ($(this).hasClass('new')) {
          path = $list.attr('create');
        } else {
          path = $list.attr('edit').replace('$id', this.id);
        }
        return $list.children('.data').children('.entity-edit').css({
          top: top,
          opacity: ''
        }).hide().load(path, function() {
          $list.addClass('inited');
          initFormBehaviour.call(this);
          return $(this).show().css({
            right: -50
          }).animate({
            right: 0
          }, function() {
            return $list.animate({
              minHeight: top + $(this).height()
            });
          });
        });
      });
      $base.on('click', '.entity-form .btn.cancel', function() {
        var $item, $list;
        $(this).closest('.entity-edit').hide();
        $list = $(this).closest('.entity-list').removeClass('inited');
        $item = $list.children('.data').children('.entities').children('.edit').removeClass('edit');
        rebaseTo($list.parent().closest('.entity-list'));
        if ($item.offset().top < $("body").scrollTop()) {
          $("html, body").animate({
            scrollTop: $item.offset().top - 20
          });
        }
        return false;
      });
      $base.on('submit', '.entity-form form.forms', function() {
        var $list, action, method;
        if ($(this).data('process')) {
          return false;
        }
        if ($(this).find('.loading').length) {
          alert("Картинки всё ещё загружаются");
          return false;
        }
        $(this).data('process', true);
        $list = $(this).closest('.entity-list');
        action = this.getAttribute('action');
        method = this.getAttribute('method');
        $(this).find(".error").remove();
        $(this).find(".input-error").removeClass('input-error');
        $(this).find(".over-blackout").removeClass('over-blackout');
        $.ajax({
          url: action,
          type: method,
          data: $(this).serialize(),
          context: this,
          success: function(ans, status, jqXHR) {
            var $message, $new, first, id, isNew, rollback, rollbackData;
            if (jqXHR.getResponseHeader('success')) {
              id = jqXHR.getResponseHeader('id');
              isNew = jqXHR.getResponseHeader('isNew');
              if (isNew) {
                $new = $list.children('.data').children('.entities').children('.new');
                $("<div id='" + id + "'></div>").insertAfter($new).hide().trigger('refresh');
              } else {
                $list.children('.data').children('.entities').children('#' + id).trigger('refresh');
              }
              try {
                rollbackData = $.parseJSON(ans);
                rollback = "<a href='#' class='color-yellow rollback close-message'>отменить</a>";
                $message = message.info("Сохранено", "Данные успешно обновлены. " + rollback);
                if (rollbackData) {
                  $message.find(".rollback").click(function(e) {
                    $.ajax({
                      url: action,
                      type: method,
                      data: rollbackData,
                      success: function() {
                        return $list.children('.data').children('.entities').children('#' + id).trigger('refresh');
                      }
                    });
                    return e.preventDefault();
                  });
                }
              } catch (_error) {
                message.info("Сохранено", "Данные успешно обновлены.");
              }
              return $(this).find('.btn.cancel').trigger('click');
            } else {
              message.error("Ошибка", "Данные нельзя сохранить");
              first = true;
              $(ans).find(".input-error").each(function() {
                var $el, $fader, $group, rel;
                $el = $("#" + this.id);
                $el.addClass("input-error").parents("label").addClass('over-blackout');
                if ($el.parents('.redactor_box').length) {
                  $el = $el.parents('.redactor_box').addClass('input-error');
                }
                $(this).parents('label').next(".error").insertAfter($el.parents('label'));
                if (first) {
                  first = false;
                  $group = $el.parents('.group:not(:visible)');
                  if ($group.length > 0) {
                    rel = $group.data('rel');
                    $group.siblings('nav').children("[data-rel=" + rel + "]").trigger('click');
                  }
                  $("html, body").animate({
                    scrollTop: $el.offset().top - 150
                  });
                  $fader = $("<div>").addClass("blackout");
                  $el.parents('form').prepend($fader);
                  $fader.delay(2000).fadeOut(1000, function() {
                    return $(this).remove();
                  });
                }
                return true;
              });
              return $(this).data('process', false);
            }
          },
          error: function(xhr) {
            var $error;
            $error = message.error("Ошибка", "Не удалось загрузить данные. <a class='close-message show-info color-red' href='#'>Детальная информация</a>");
            $error.find('.show-info').click(function() {
              new Popup("<div class='popup-page error-info'>" + xhr.responseText + "<a class='btn close-popup' href='#'>Закрыть</a></div>");
              return false;
            });
            return $(this).data('process', false);
          }
        });
        return false;
      });
      return $base.on('click', '.entity-form .btn.remove', function() {
        var $list;
        if (!confirm("Вы уверены?")) {
          return;
        }
        $list = $(this).closest('.entity-list').removeClass('inited');
        $(this).closest('.entity-edit').hide();
        $list.children('.data').children('.entities').children('.edit').removeClass('edit').each(function() {
          return $.ajax({
            url: $list.attr('remove').replace('$id', this.id),
            context: this,
            success: function(ans, status, jqXHR) {
              if (jqXHR.getResponseHeader('success')) {
                $(this).slideUp(function() {
                  return $(this).remove();
                });
                return message.success("Удалено");
              } else {
                return message.error("Невозможно удалить");
              }
            }
          });
        });
        return false;
      });
    })();
    $(".table-edit").each(function() {
      var $table, create, edit, jqXHR, one, reload, remove, search;
      edit = this.getAttribute('edit');
      remove = this.getAttribute('remove');
      create = this.getAttribute('create');
      one = this.getAttribute('one');
      $table = $(this).find('tbody');
      $(this).on('click', '.pager .btn', function() {
        $.ajax({
          url: this.getAttribute('href'),
          context: this,
          success: function(ans) {
            $(ans).insertBefore($(this).parents('.pager'));
            return $(this).parents('.pager').remove();
          }
        });
        return false;
      });
      $(this).on('remove', 'tr', function() {
        var path;
        path = remove.replace('$id', this.id);
        return $.ajax({
          url: path,
          context: this,
          success: function(ans, status, jqXHR) {
            if (jqXHR.getResponseHeader('success')) {
              $(this).remove();
              return message.success("Удалено");
            } else {
              return message.error("Невозможно удалить");
            }
          }
        });
      });
      $(this).on('click', '.remove', function() {
        if (!confirm("Удалить?")) {
          return false;
        }
        $(this).parents('tr').trigger('remove');
        return false;
      });
      search = $(this).parents(".container").find(".input-search").val();
      jqXHR = null;
      reload = (function(_this) {
        return function() {
          var data;
          data = {
            search: search
          };
          if (jqXHR) {
            jqXHR.abort();
          }
          if (history.replaceState) {
            history.replaceState(data, document.title, location.pathname + "?" + $.param(data));
          }
          return jqXHR = $.ajax({
            url: location.pathname,
            data: data,
            context: $(_this).find('.data').stop(),
            success: function(html) {
              $(this).stop().html(html).animate({
                opacity: 1
              });
              return jqXHR = null;
            },
            error: function(xhr, err) {
              if (err === "abort") {
                return;
              }
              alert("Не удалось загрузить данные");
              $(this).stop().animate({
                opacity: 1
              });
              return jqXHR = null;
            }
          });
        };
      })(this);
      $(this).parents(".container").find(".input-search").bind({
        keydown: function(e) {
          if (e.keyCode === 27) {
            $(this).val(search = '');
            return reload();
          } else {
            return setTimeout((function(_this) {
              return function() {
                search = $(_this).val();
                return reload();
              };
            })(this), 10);
          }
        }
      });
      $(this).parents(".container").find(".search-button").click(function() {
        search = $(this).siblings('input').val();
        return reload();
      });
      $(this).on('click', 'td', function() {
        return $(this).parent().find('.edit').trigger('click');
      });
      return $(this).on('click', '.edit, .create', function() {
        var $tr, path;
        if ($(this).hasClass('create')) {
          path = create;
        } else {
          $tr = $(this).parents('tr');
          path = edit.replace('$id', $tr[0].id);
        }
        $.ajax({
          url: path,
          success: function(ans) {
            var $form, $popup, popup;
            popup = new Popup(ans);
            $popup = popup.popup;
            $popup.find('.remove').click(function() {
              if (!confirm("Удалить?")) {
                return false;
              }
              $tr.trigger('remove');
              $popup.find('.cancel').trigger('click');
              return false;
            });
            $popup.find('.cancel').click(function() {
              popup.remove();
              return false;
            });
            $form = $popup.find('.entity-form>form');
            initFormBehaviour.call($form, arguments);
            return $form.submit(function() {
              if ($(this).data('process')) {
                return false;
              }
              $(this).data('process', true);
              $.ajax({
                url: this.getAttribute('action'),
                type: this.getAttribute('method'),
                data: $(this).serialize(),
                context: this,
                success: function(ans, status, jqXHR) {
                  if (jqXHR.getResponseHeader('success')) {
                    message.success("Сохранено", "Данные успешно обновлены");
                    if ($tr) {
                      $tr.load(one.replace('$id', $tr[0].id), function() {
                        return $(this).children().unwrap();
                      });
                    } else {
                      $.ajax({
                        url: one.replace('$id', jqXHR.getResponseHeader('id')),
                        success: (function(_this) {
                          return function(ans) {
                            return $table.prepend(ans);
                          };
                        })(this)
                      });
                    }
                    return $(this).find('.btn.cancel').trigger('click');
                  } else {
                    message.error("Ошибка", "Данные нельзя сохранить");
                    return $(this).parents('.entity-form').html($(ans).html());
                  }
                },
                error: function() {
                  alert("Не удалось загрузить данные");
                  return $(this).data('process', false);
                }
              });
              return false;
            });
          }
        });
        return false;
      });
    });
    $("body").on('change', '.btn-file.autosubmit', function() {
      return $(this).parents('form').submit();
    });
    return $('.btn-file').each(function() {
      return $(this).replaceWith($(this).clone(true));
    });
  });

}).call(this);
